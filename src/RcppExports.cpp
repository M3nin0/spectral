// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ndvi
NumericVector ndvi(NumericVector& red, NumericVector& nir);
RcppExport SEXP _spectral_ndvi(SEXP redSEXP, SEXP nirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type red(redSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type nir(nirSEXP);
    rcpp_result_gen = Rcpp::wrap(ndvi(red, nir));
    return rcpp_result_gen;
END_RCPP
}
// evi2
NumericVector evi2(NumericVector& red, NumericVector& nir);
RcppExport SEXP _spectral_evi2(SEXP redSEXP, SEXP nirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type red(redSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type nir(nirSEXP);
    rcpp_result_gen = Rcpp::wrap(evi2(red, nir));
    return rcpp_result_gen;
END_RCPP
}
// ndwi2
NumericVector ndwi2(NumericVector& green, NumericVector& nir);
RcppExport SEXP _spectral_ndwi2(SEXP greenSEXP, SEXP nirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type green(greenSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type nir(nirSEXP);
    rcpp_result_gen = Rcpp::wrap(ndwi2(green, nir));
    return rcpp_result_gen;
END_RCPP
}
// bndvi
NumericVector bndvi(NumericVector& blue, NumericVector& nir);
RcppExport SEXP _spectral_bndvi(SEXP blueSEXP, SEXP nirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type blue(blueSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type nir(nirSEXP);
    rcpp_result_gen = Rcpp::wrap(bndvi(blue, nir));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spectral_ndvi", (DL_FUNC) &_spectral_ndvi, 2},
    {"_spectral_evi2", (DL_FUNC) &_spectral_evi2, 2},
    {"_spectral_ndwi2", (DL_FUNC) &_spectral_ndwi2, 2},
    {"_spectral_bndvi", (DL_FUNC) &_spectral_bndvi, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_spectral(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
